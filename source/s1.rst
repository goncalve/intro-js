Introduction au langage
=======================

.. include:: common.rst.inc
.. ifslides::

   .. include:: credits.rst.inc

Rappels
+++++++

Architecture Client-Serveur
---------------------------

* **Ressource**:
  toute unité d'information (document, image, vidéo...) accessible sur le Web

* **Serveur**:
  un ordinateur « contenant » des ressources, toujours connecté à Internet.

* **Client**:
  un ordinateur/smartphone/tablette... utilisé pour afficher des ressources.

.. figure:: _static/client-server.png
   :height: 8ex  

   Source image http://commons.wikimedia.org/wiki/File:Client-server-model.svg

Rôles du serveur
----------------

* Le serveur est garant de l'*état* des ressources.

* Il fournit au client une *représentation* de la ressource

  - soit stockée telle quelle (fichier),
  - soit calculée à la demande (PHP, Java...).

Rôles du client
---------------

* Afficher la représentation de la ressource.

* Assurer les interactions avec la ressource :

  - lien vers d'autres ressources,
  - liens internes,
  - autres types d'interactions « internes » (``<video>``, ``:hover``...).

.. nextslide::

* HTML + CSS peuvent être considérés comme 

  - un langage de programmation *déclaratif*,

  - spécialisé dans la description de documents hypermédia,

  - offrant un ensemble limité d'interactions.

* Javascript complète HTML + CSS

  - avec un langage de programmation généraliste,

  - offrant un spectre beaucoup plus large d'interaction.


Syntaxe
+++++++

Inspiration
-----------

* Comme son nom l'indique,
  la syntaxe de Javascript est (librement) inspirirée de celle de Java
  (ou du C).

* La similitude s'arrête là :
  Javascript n'est pas basé sur Java.


Condition
`````````
.. code::

   if (i < 10) {
       j = j+1;
       k += i;
   } else {
       j = 0;
   }

Boucles
```````

.. code::

   while (i < 10) {
       j = j*i;
       i += 1;
   }

.. code::

   for(i=0; i<10; i+=1) {
       j = j*i;
   }

Exceptions
``````````

.. code::

   if (i < 0) {
       throw new Error("negative value");
   }

.. code::

   try {
       i = riskyFunction();
   }
   catch (err) {
       i = -1;
   }

Tableaux
````````

.. code::

   a = [1,2,3,5,8,13];
   for (i=0; i < a.length ; i+=1) {
       console.log(a[i]);
   }
   // affiche tous les éléments du tableau

.. hint::

   Comme en Python et contrairement à Java,
   les tableaux en JS peuvent changer de taille
   (voir
   `leur documentation <http://devdocs.io/javascript/global_objects/array>`_
   pour plus de détail)

.. warning::

   Contrairement à Python, un tableau vide (de longueur 0)
   est équivalent à ``true`` dans une condition.

Différences
-----------

Il existe cependant des différences importantes que vous devez connaître.

Langage interprété
``````````````````

* Javascript est un langage interprété,
  et n'a donc pas de phase de compilation.

* Or le compilateur a un rôle important dans la détection d'erreurs,
  y compris des erreurs non critiques.

* Il vous est **fortement recommandé**
  d'utiliser des outils de vérification de code,
  tels que `JSHint`_.

* NB: les IDEs intègrent généralement ce genre d'outil.

.. _JSHINT: http://jshint.com/

.. note::

   `JSHint`_ peut être installé sur votre machine,
   mais peut-également être utilisé directement en ligne.


Chaînes de caractères
`````````````````````

* Contrairement au C ou au Java,
  Javascript n'a pas de type *char*.

* Si ``txt`` est une chaîne de catactères,
  ``txt[i]`` retourne également une chaîne de caractères de longueur 1.

* Les guillemets simples (``'``) ou doubles (``"``)
  peuvent être utilisés indifféremment pour délimiter les chaînes de caractères.

.. note::

   Ces particularités sont partagéees avec d'autres langage dynamiquement typés,
   comme par exemple Python.

Typage dynamique
````````````````

En Java (comme en C), les variables et les fonctions ont un type fixé :

.. code:: java

    int fact(int n) {
        int r = 1;
        for(int i=1; i<=n; i+=1) {
            r *= i;
        }
        return r;
    }

.. nextslide::

En Javascript (comme en Python), on ne spécifie pas le type des variables
ou des fonctions :

.. code::

    function fact(n) {
        var r = 1;
        for(var i=1; i<=n; i+=1) {
            r *= i;
        }
        return r;
    }

.. hint::

   Remarquez le mot-clé ``var``
   devant les premières utilisations des variables ``r`` et ``i``.

.. note::

   On parle de **typage dynamique**,
   car cela permet à une variable de contenir (par exemple)
   un entier à un moment, et une chaîne de caractères à un autre moment.
   De la même manière,
   une fonction pourra retourner (par exemple)
   tantôt un flottant, tantôt un entier.

   Cette flexibilité est utile dans certains cas,
   même si bien sûr il ne faut pas l'utiliser pour faire n'importe quoi...


Déclaration des variables locales
`````````````````````````````````

Contrairement aux autres langages dynamiquement typés,
Javascript demande que les variables locales soient déclarées,
avec le mot-clé ``var``.

.. hint::

   Les paramètres des fonctions font exception à cette règle,
   puisqu'ils sont déclarés par leur présence dans l'en-tête de la fonction.

.. warning::

   Un oubli du mot-clé ``var`` est dangereux,
   car il ne constitue pas une erreur,
   mais dans ce cas la variable est considérée comme globale,
   ce qui peut avoir créer des bugs difficiles à détecter,
   comme le montre
   `cet exemple <http://www.turb0js.com/a/Bug_with_global_variables>`_.

.. hint::

   JSHint_ détecte la plupart du temps ce type d'erreur.

Tests d'égalité
```````````````

En JS, on teste l'égalité avec l'opérateur ``===``,
et l'inégalité avec l'opérateur ``!==``\  ::

    if (i === j  &&  i !== k) // ...

.. warning::

   Les opérateurs habituels ``==`` et ``!=`` existent aussi,
   mais ils ont une sémantique très inhabituelle,
   et sont donc généralement évités.

.. hint::

   JSHint signale toute utilisation de ``==`` ou ``!=``.

.. note::

   En fait, l'opérateur ``==`` considère que
   deux valeurs de types différents sont égales
   si on peut passer de l'une à l'autre par conversion de type.

   Par exemple ::

     "42" == 42 // est vrai

   C'est un problème, car cela conduit à des choses contre-intuitives ::

     if (a == b  &&  b == c) {
         a == c; // peut être faux
         // par exemple: a = "0", b = 0, c = "" ;
         // en effet, 0 et "" sont tous deux équivalents à false
     }

   ou encore ::

     if (a == b) {
         a+1 == b+1; // peut être faux
         // par exemple: a = "42" (a+1 == "421") et b = 42 (b+1 == 43)
     }

``null`` et ``undefined``
`````````````````````````

* En Java et en C, il n'existe qu'une seule valeur « nulle ».

* En JS, il en existe deux : ``null`` et ``undefined``.

* Elles sont utilisées dans des contextes un peu différent ;
  pour l'instant, retenez surtout que les deux existent.

.. hint::

   Les deux sont équivalentes à ``false`` dans une condition.


À vous de jouer
---------------

* `Documentation <http://devdocs.io/javascript/>`_
* `Environnement de test <http://jsbin.com/fosuzu/1/edit?js,console>`_
* Rappel: pour afficher, utilisez ``console.log()``
* Écrivez et testez

  - un programme qui écrit « hello world »
  - une fonction qui le nombre de voyelles dans une chaîne de caractères
  - une fonction qui trouve le plus petit élément d'un tableau
  - une fonction qui calcule la moyenne d'un tableau
  - ...


Notion d'événement HTML
+++++++++++++++++++++++

Programmation événementielle
----------------------------

* En programmation impérative classique,
  la fonction principale (``main``) décrit dans quel ordre
  les différentes fonctions du programme doivent s'exécuter.

* En programmation événementielle,
  on « abonne » chaque fonction à un (ou plusieurs) **événement(s)**.

* La fonction s'exécute
  lorsqu'un événement auquel elle est abonnée se produit.

* Les événement sont (souvent) liés aux interactions de l'utilisateur
  avec l'application.

Intégration directe au HTML
---------------------------

.. code-block:: html

   <p>Hello <span onmouseover="console.log('haha, tickles');">world</span></p>
   <button onclick="console.log('click');">Click me</button>

`Essayez cet exemple.`__

__ _static/exemples/s1_integration_directe.html

.. hint::

   Pour voir ce qui s'affiche sur la console,
   pressez CTRL+SHIFT+J (sous Chrome) ou CTRL+SHIFT+K (sous Firefox).

Définition des fonctions dans une balise script
-----------------------------------------------

.. code-block:: html

   <p>Hello <span onmouseover="f1();">world</span></p>
   <button onclick="f2();">Click me</button>

   <script type="text/javascript">
     function f1() {
         console.log('haha, tickles');
     }
     function f2() {
         console.log('click');
     }
   </script>

`Essayez cet exemple.`__

__ _static/exemples/s1_balise_script.html

Définition des fonctions dans un script externe
-----------------------------------------------

.. code-block:: html

   <p>Hello <span onmouseover="f1();">world</span></p>
   <button onclick="f2();">Click me</button>

   <script type="text/javascript" src="s1_script_externe.js"></script>

`Essayez cet exemple,`__ 
ou `modifiez-le.`__

__ _static/exemples/s1_script_externe.html
__ http://jsbin.com/quzuku/11/edit?html,js,console,output


.. _abonnements_prog:

Définition des fonctions *et des abonnements* dans un script externe
--------------------------------------------------------------------

.. code-block:: html

   <p>Hello <span>world</span></p>
   <button id="b1">Click me</button>

   <script type="text/javascript" src="s1_script_externe.js"></script>

.. code::

   // définition de f1 et f2 comme précédemment, puis...

   document.getElementsByTagName('span')[0]
     .addEventListener('mouseover', f1);

   document.getElementById('b1')
     .addEventListener('click', f2);

`Voir et modifier cet exemple.`__

__ http://jsbin.com/quzuku/13/edit?html,js,console,output

.. note::

   On va expliquer `juste après <dom>`:ref: la manière dont ce code fonctionne.

   Bien que les quatre méthodes fonctionnent,
   la dernière est aujourd'hui considérée comme la meilleure,
   car elle assure la meilleure séparation entre l'aspect structurel (HTML)
   et l'aspect dynamique (Javascript).

   On verra également `dans la suite <onload>`:ref:
   que cet exemple n'est pas encore tout à fait parfait.
   

Événements
----------

Le standard HTML5 définit un large éventail d'événements
que le code Javascript peut intercepter :

* `les plus utilisés <http://www.htmlquick.com/reference/events.html>`_

* `une liste exhaustive <http://devdocs.io/dom_events/>`_

.. hint::

   Dans le code HTML,
   les attributs correspondants ont toujours la forme ``onX``
   où ``X`` est le nom de l'événement.

.. _dom:

Bases du DOM
++++++++++++

Rappel
------

Les balises HTML décrivent une `structure d'arbre`__.

__ http://champin.net/enseignement/intro-web/html.html#structure-en-arbre

.. graphviz::

   graph  {

     node [ shape=box, style=rounded]

     html -- head
      head -- title -- title_txt
     html -- body
      body -- h1 -- h1_txt
      body -- p
       p -- p_txt
       p -- a -- a_txt
      body -- img

     a         [ label="a\nhref='./link'" ]
     img       [ label="img\src='./pic'" ]
     title_txt [ shape=box, style=filled, label="Le document" ]
     h1_txt    [ shape=box, style=filled, label="Message important" ]
     p_txt     [ shape=box, style=filled, label="Bonjour le " ]
     a_txt     [ shape=box, style=filled, label="monde" ]

   }


Terminologie
------------

* Cet arbre s'appelle l'arbre DOM (pour :en:`Document Object Model`).

* Les nœuds correspondant aux balises sont appelés des **éléments**.

* Les nœuds contenant le contenu textuels sont simplement appelés des « nœuds texte ».


L'objet ``document``
--------------------

* La variable globale ``document`` contient un objet représentant le document HTML,
  et donnant accès à l'ardre DOM,

* notamment :l:`via` ces deux méthodes :

  ``getElementsByTagName(tagname)``:

    retourne un tableau des éléments définis par une balise ``tagname``

  ``getElementById(id)``:

    retourne l'élément ayant pour identifiant ``id``


Attributs et méthodes d'un élément
----------------------------------

``addEventListener(eventname, func)``:

  abonne ``func`` à l'événement ``eventname`` sur cet élément,
  comme illustré dans `l'exemple précédent`__.

``innerHTML``:

  permet de consulter *et modifier* le contenu HTML de l'élément

``style``:

  permet de consulter et modifier l'attribut ``style`` de l'élément,
  sous forme d'un objet ayant un attribut pour chaque propriété CSS.
  (:l:`e.g.` ``e.style.fontSize`` pour la propriété ``font-size``)

  __ abonnements_prog_

  .. note::

     Pour faciliter l'utilisation en Javascript,
     la typographie des attributs de ``style`` n'est pas la même que celle des propriétés CSS correspondantes.
     Les tirets (``-``) sont remplacés par une mise en majuscule de la letter suivante
     (`CamelCase <https://en.wikipedia.org/wiki/CamelCase>`_).

.. nextslide::

``classList``:

  permet de consulter et modifier l'attribut ``class`` de l'élément,
  grâce aux méthodes suivantes :

  * ``add(cls)``: ajoute la classe `cls` a l'élément.

  * ``remove(cls)``: retire la classe `cls` a l'élément.

  * ``contains(cls)``: indique si l'élément possède actuellement la classe ``cls``.

  * ``toggle(cls)``: inverse l'état de la classe `cls` (présente/absente) sur l'élément.

  .. note::

     Comme en HTML+CSS,
     il est préférable de spécifier la mise en forme à l'aide de classes dans le CSS,
     et de modifier ces classes dans le code Javascript,
     plutôt que la spécifier directement dans le code Javascript à travers l'attribute ``style``.

.. nextslide::

Les éléments possèdent de nombreux autres attributs;
en particulier, chaque attribut HTML a une contrepartie en Javascript.

On peut notamment citer :

* ``href`` (pour les ``<a>``)
* ``src`` (pour les ``<img>``)
* ``value`` (pour les ``<input>``)
* ``disabled`` (pour tous les éléments de formulaire)
* ``checked`` (pour les cases à cocher)
* :l:`etc`...

Expérimentez
````````````

... sur `cet exemple`__.

__ _static/exemples/element_manipulation.html


.. _onload:

Événement de chargement du DOM
------------------------------

* On ne peut pas garantir que l'arbre DOM sera totalement construit *avant* l'exécution du code Javascript.

* Par conséquent, les appels à ``getElement*`` peuvent échouer.

* Pour créer les abonnements,
  il faut donc attendre l'événement indiquant la construction complète de l'arbre DOM.

* Cet événement se nomme ``load``,
  et il est accessible sur l'objet ``window``,
  qui représente la fenêtre du navigateur.

.. note::

   Contrairement aux éléments de l'arbre DOM,
   l'objet ``window`` existe forcément dès l'exécution du Javascript,
   donc on peut sans risque s'abonner à ces événements.

.. nextslide::

.. code::

   // définition des fonctions f1 et f2, puis...

   function cree_abonnements() {
     document.getElementsByTagName('span')[0]
       .addEventListener('mouseover', f1);
     document.getElementById('b1')
       .addEventListener('click', f2);
   }

   window.addEventListener("load", cree_abonnements);

`Voir et modifier cet exemple.`__

__ http://jsbin.com/quzuku/14/edit?html,js,console,output


TP: Formulaires avec différents controles
+++++++++++++++++++++++++++++++++++++++++

.. rst-class:: exercice

Sujet
-----

* Créez un formulaire contenant les champs suivants :
  Prénom, Nom, Age, Identifant, Mot de passe (2 fois),
  et une case à cocher « J'accèpte les CGU ».

* Le bouton de soumission est grisé,
  et ne s'active que lorsque les conditions ci-dessous sont toutes satisfaites :

  - l'age est un entier supérieur ou égal à 18 ;
  - l'identifiant est composé de moins de 12 caractères, seulement des lettres ;
  - le mot de passe est suffisamment « fort » (cf. ci-dessous) ;
  - le deuxième mot de passe est identique au premier ;
  - les CGU ont été acceptées.

.. nextslide::

* La force du mot de passe doit s'afficher (en %) à coté du mot de passe ;
  les 5 critères suivants y contribuent à 20% chacun:

  - il doit faire au moins 8 caractères,
  - il doit contenir au moins une lettre minuscule,
  - il doit contenir au moins une lettre majuscule,
  - il doit contenir au moins un chiffre,
  - il doit contenir au moins un caractère qui ne soit ni une lettre, ni un chiffre.

* Par ailleurs,
  le formulaire doit indiquer le plus explicitement possible à l'utilisateur
  ce qu'on attend de lui (textes d'aide, mise en évidence...).

NB: Vous pourriez trouver utile l'`annexe ci-après`__.

__ regexp_

Liens utiles
++++++++++++

:doc:`liens`

.. _regexp:

Annexe : les expressions régulières
+++++++++++++++++++++++++++++++++++

Définition
----------

Une expression régulière (ou *regexp*)
décrit dans une syntaxe spécialisée une famille de chaînes de caractères.

Par exemple :

* ``[a-z]{1,5}``\  : un mot de 1 à 5 lettres
* ``\d{2}/\d{2}/\d{4}``\  : une date (jj/mm/aaaa)
* ``[a-z]+@[a-z]+(\.[a-z]+)*``\  : une adresse e-mail

.. hint::

   Les expressions régulières sont utilisables dans tous les langages de programmation,
   mais elles sont particulièrement bien intégrées à Javascript.

Pour en savoir plus
-------------------

* Apprendre__
* Essayer__
* Jouer__
* `Jouer encore`__

__ https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
__ http://regexpal.com/
__ http://regexcrossword.com/
__ http://www.regex.alf.nu/
