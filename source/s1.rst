Introduction au langage
=======================

.. include:: common.rst.inc
.. ifslides::

   .. include:: credits.rst.inc

Rappels
+++++++

Architecture Client-Serveur
---------------------------

* **Ressource**:
  toute unité d'information (document, image, vidéo...) accessible sur le Web

* **Serveur**:
  un ordinateur « contenant » des ressources, toujours connecté à Internet.

* **Client**:
  un ordinateur/smartphone/tablette... utilisé pour afficher des ressources.

.. figure:: _static/client-server.png
   :height: 8ex  

   Source image http://commons.wikimedia.org/wiki/File:Client-server-model.svg

Rôles du serveur
----------------

* Le serveur est garant de l'*état* des ressources.

* Il fournit au client une *représentation* de la ressource

  - soit stockée telle quelle (fichier),
  - soit calculée à la demande (PHP, Java...).

Rôles du client
---------------

* Afficher la représentation de la ressource.

* Assurer les interactions avec la ressource :

  - lien vers d'autres ressources,
  - liens internes,
  - autres types d'interactions « internes » (``<video>``, ``:hover``...).

.. nextslide::

* HTML + CSS peuvent être considérés comme 

  - un langage de programmation *déclaratif*,

  - spécialisé dans la description de documents hypermédia,

  - offrant un ensemble limité d'interactions.

* Javascript complète HTML + CSS

  - avec un langage de programmation généraliste,

  - offrant un spectre beaucoup plus large d'interaction.


Syntaxe
+++++++

Inspiration
-----------

* Comme son nom l'indique,
  la syntaxe de Javascript est (librement) inspirirée de celle de Java
  (ou du C).

* La similitude s'arrête là :
  Javascript n'est pas basé sur Java.


Condition
`````````
.. code::

   if (i < 10) {
       j = j+1;
       k += i;
   } else {
       j = 0;
   }

Boucles
```````

.. code::

   while (i < 10) {
       j = j*i;
       i += 1;
   }

.. code::

   for(i=0; i<10; i+=1) {
       j = j*i;
   }

Exceptions
``````````

.. code::

   if (i < 0) {
       throw new Error("negative value");
   }

.. code::

   try {
       i = riskyFunction();
   }
   catch (err) {
       i = -1;
   }

Tableaux
````````

.. code::

   a = [1,2,3,5,8,13];
   for (i=0; i < a.length ; i+=1) {
       console.log(a[i]);
   }
   // affiche tous les éléments du tableau

.. hint::

   Comme en Python et contrairement à Java,
   les tableaux en JS peuvent changer de taille
   (voir
   `leur documentation <http://devdocs.io/javascript/global_objects/array>`_
   pour plus de détail)

.. warning::

   Contrairement à Python, un tableau vide (de longueur 0)
   est équivalent à ``true`` dans une condition.

Différences
-----------

Il existe cependant des différences importantes que vous devez connaître.

Langage interprété
``````````````````

* Javascript est un langage interprété,
  et n'a donc pas de phase de compilation.

* Or le compilateur a un rôle important dans la détection d'erreurs,
  y compris des erreurs non critiques.

* Il vous est **fortement recommandé**
  d'utiliser des outils de vérification de code,
  tels que `JSHint`_.

* NB: les IDEs intègrent généralement ce genre d'outil.

.. _JSHINT: http://jshint.com/

.. note::

   `JSHint`_ peut être installé sur votre machine,
   mais peut-également être utilisé directement en ligne.


Chaînes de caractères
`````````````````````

* TODO
* " ou '
* txt[i] est une chaîne (pas de type char)

Typage dynamique
````````````````

En Java (comme en C), les variables et les fonctions ont un type fixé :

.. code:: java

    int fact(int n) {
        int r = 1;
        for(int i=1; i<=n; i+=1) {
            r *= i;
        }
        return r;
    }

.. nextslide::

En Javascript (comme en Python), on ne spécifie pas le type des variables
ou des fonctions :

.. code::

    function fact(n) {
        var r = 1;
        for(var i=1; i<=n; i+=1) {
            r *= i;
        }
        return r;
    }

.. hint::

   Remarquez le mot-clé ``var``
   devant les premières utilisations des variables ``r`` et ``i``.

.. note::

   On parle de **typage dynamique**,
   car cela permet à une variable de contenir (par exemple)
   un entier à un moment, et une chaîne de caractères à un autre moment.
   De la même manière,
   une fonction pourra retourner (par exemple)
   tantôt un flottant, tantôt un entier.

   Cette flexibilité est utile dans certains cas,
   même si bien sûr il ne faut pas l'utiliser pour faire n'importe quoi...


Déclaration des variables locales
`````````````````````````````````

Contrairement aux autres langages dynamiquement typés,
Javascript demande que les variables locales soient déclarées,
avec le mot-clé ``var``.

.. hint::

   Les paramètres des fonctions font exception à cette règle,
   puisqu'ils sont déclarés par leur présence dans l'en-tête de la fonction.

.. warning::

   Un oubli du mot-clé ``var`` est dangereux,
   car il ne constitue pas une erreur,
   mais dans ce cas la variable est considérée comme globale,
   ce qui peut avoir créer des bugs difficiles à détecter,
   comme le montre
   `cet exemple <http://www.turb0js.com/a/Bug_with_global_variables>`_.

.. hint::

   JSHint_ détecte la plupart du temps ce type d'erreur.

Tests d'égalité
```````````````

En JS, on teste l'égalité avec l'opérateur ``===``,
et l'inégalité avec l'opérateur ``!==``\  ::

    if (i === j  &&  i !== k) // ...

.. warning::

   Les opérateurs habituels ``==`` et ``!=`` existent aussi,
   mais ils ont une sémantique très inhabituelle,
   et sont donc généralement évités.

.. hint::

   JSHint signale toute utilisation de ``==`` ou ``!=``.

.. note::

   En fait, l'opérateur ``==`` considère que
   deux valeurs de types différents sont égales
   si on peut passer de l'une à l'autre par conversion de type.

   Par exemple ::

     "42" == 42 // est vrai

   C'est un problème, car cela conduit à des choses contre-intuitives ::

     if (a == b  &&  b == c) {
         a == c; // peut être faux
         // par exemple: a = "0", b = 0, c = "" ;
         // en effet, 0 et "" sont tous deux équivalents à false
     }

   ou encore ::

     if (a == b) {
         a+1 == b+1; // peut être faux
         // par exemple: a = "42" (a+1 == "421") et b = 42 (b+1 == 43)
     }

``null`` et ``undefined``
`````````````````````````

* En Java et en C, il n'existe qu'une seule valeur « nulle ».

* En JS, il en existe deux : ``null`` et ``undefined``.

* Elles sont utilisées dans des contextes un peu différent ;
  pour l'instant, retenez surtout que les deux existent.

.. hint::

   Les deux sont équivalentes à ``false`` dans une condition.


À vous de jouer
---------------

* `Documentation <http://devdocs.io/javascript/>`_
* `Environnement de test <http://jsbin.com/?js,console>`_
* Rappel: pour afficher, utilisez ``console.log()``
* Écrivez et testez

  - un programme qui écrit « hello world »
  - une fonction qui le nombre de voyelles dans une chaîne de caractères
  - une fonction qui trouve le plus petit élément d'un tableau
  - une fonction qui calcule la moyenne d'un tableau
  - ...


Notion d'événement HTML
+++++++++++++++++++++++

Programmation événementielle
----------------------------

* En programmation impérative classique,
  la fonction principale (``main``) décrit dans quel ordre
  les différentes fonctions du programme doivent s'exécuter.

* En programmation événementielle,
  on « abonne » chaque fonction à un (ou plusieurs) **événement(s)**.

* La fonction s'exécute
  lorsqu'un événement auquel elle est abonnée se produit.

* Les événement sont (souvent) liés aux interactions de l'utilisateur
  avec l'application.

Intégration directe au HTML
---------------------------

.. code-block:: html

   <p>Hello <span onmouseover="console.log('haha, tickles');">world</span></p>
   <button onclick="console.log('click');">Click me</button>

`Essayez cet exemple. <_static/exemples/s1_integration_directe.html>`_

.. hint::

   Pour voir ce qui s'affiche sur la console,
   pressez CTRL+SHIFT+J (sous Chrome) ou CTRL+SHIFT+K (sous Firefox).

Définition des fonctions dans une balise script
-----------------------------------------------

.. code-block:: html

   <p>Hello <span onmouseover="f1();">world</span></p>
   <button onclick="f2();">Click me</button>

   <script type="text/javascript">
     function f1() {
         console.log('haha, tickles');
     }
     function f2() {
         console.log('click');
     }
   </script>

`Essayez cet exemple. <_static/exemples/s1_balise_script.html>`_

Définition des fonctions dans un script externe
-----------------------------------------------

.. code-block:: html

   <p>Hello <span onmouseover="f1();">world</span></p>
   <button onclick="f2();">Click me</button>

   <script type="text/javascript" src="s1_script_externe.js"></script>

`Essayez cet exemple, <_static/exemples/s1_script_externe.html>`_
ou `modifiez-le. <http://jsbin.com/quzuku/1/edit?html,js,console,output>`_.

Événements
``````````

Le standard HTML5 définit un large éventail d'événements
que le code Javascript peut intercepter :

* `les plus utilisés <http://www.htmlquick.com/reference/events.html>`_

* `une liste exhaustive <http://devdocs.io/dom_events/>`_

.. hint::

   Dans le code HTML,
   les attributs correspondants ont toujours la forme ``onX``
   où ``X`` est le nom de l'événement.

TODO
----
  
  - getElementBy*
  - montrer comment s'abonner aux événements dans le code
  - `exemple <http://jsbin.com/quzuku/2/edit?html,js,console,output>`_
  - expliquer que c'est la bonne pratique
  - expliquer qu'il faut faire ça dans l'événement ``load``

Bases du DOM
++++++++++++

     - avec getElementBy*
     - style
     - classList (add, remove)
     - innerHtml
     - `exercice <_static/exemples/element_manipulation.html>`_
     - formulaire ?
       - disabled
       - value / checked

TP: Formulaires avec différents controles
+++++++++++++++++++++++++++++++++++++++++

     - en affichant des dialogues, changeant des classes, activant/désactivant le bouton submit

Liens utiles
++++++++++++

:doc:`liens`
