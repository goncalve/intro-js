:tocdepth: 3

==============================
 Programmation événementielle
==============================

.. include:: common.rst.inc
.. ifslides::

   .. include:: credits.rst.inc


Fonction anonyme
================

Objets de premier niveau
------------------------

* En Javascript, les fonctions sont des objets de *premier niveau*,
  ce qui signifie qu'ils peuvent être manipulés au même titre que,
  par exemple, les entiers, les tableaux ou les objets.

* On peut par exemple 

  - affecter une fonction à une variable ;

  - la passer en paramètre d'une autre fonction
    (par exemple ``addEventListener``) ;

  - l'affecter comme attribut à un objet
    (ce qui est une manière de doter un objet de méthodes, comme en Java).

Fonctions anonymes
------------------

* Javascript autorise la création de fonctions *anonymes* ::

    function (param1, param2) { /* instructions here */ }

* Contrairement à une *déclaration* de fonction,
  une fonction anonyme peut apparaître *partout* ou une fonction est acceptée.

* C'est utile dans les cas ou cette fonction n'a pas vocation à être réutilisée ailleurs,
  en particulier pour les abonnements.

Exemple d'utilisation des fonctions anonymes
````````````````````````````````````````````

.. code::

  window.addEventListener("load", function() {
    document.getElementsByTagName('span')[0]
      .addEventListener("mouseover", function() {
        console.log("haha, tickles");
      }
    );
    document.getElementById('b1')
      .addEventListener("click", function() {
        console.log("click");
      }
    );
  });

`Voir et modifier cet exemple.`__

__ http://jsbin.com/quzuku/17/edit?html,js,console,output

.. _exemple_setTimeout: 

Autre exemple d'utilisation de fonction anonyme
```````````````````````````````````````````````

.. code::

  window.addEventListener("load", function() {
    var b1 = document.getElementById('b1');
  
    b1.addEventListener("click", function() {
      b1.textContent = "(en attente)";
      b1.disabled = true;
      setTimeout(function() {
        alert("message");
        b1.disabled = false;
        b1.textContent = "Afficher un message dans 2s";
      }, 2000);
    });
  });
  
`Voir et modifier cet exemple.`__

__ http://jsbin.com/quzuku/23/edit?html,js,output


Exécution asynchrone
====================

Motivation
----------

Dans l'`exemple précédent`__,
pourquoi utiliser la fonction ``setTimeout``
et non une fonction qui bloquerait l'exécution pendant 2s,
comme dans l'exemple ci-dessous ?

__ exemple_setTimeout_

.. code::

      // ⚠ MAUVAIS EXEMPLE ⚠
      b1.textContent = "(en attente)";
      b1.disabled = true;
      sleep(2000); // fonction imaginaire (n'existe pas en JS)
      alert("message");
      b1.disabled = false;
      b1.textContent = "Afficher un message dans 2s";

.. note::

   La fonction ``sleep`` n'existe pas réellement en Javascript,
   et pour cause puisque ce n'est pas la bonne manière de faire.

.. nextslide::

Parce que le navigateur n'utilise qu'*un seul* thread par page.

Si une fonction Javascript garde la main trop longtemps,
la page sera totalement « gelée » (saisie, défilement...).


Portée et fermeture
===================

Portée (:en:`scope`)
--------------------

* La **portée** d'une variable est la partie du code sur laquelle cette variable est définie.

* Pour les variables globales,
  c'est l'ensemble des scripts exécutés par la page
  (y compris les scripts écrits par d'autres).

* Pour les variables locales (``var``),
  c'est la fonction dans laquelle elle est déclarée.


* Une variable locale d'une fonction ``f`` est donc accessible par les fonctions
  (anonymes ou non) définies *à l'intérieur* de ``f``.

Fermeture (:en:`closure`)
-------------------------

* Une fonction définie à l'intérieur d'une autre porte avec elle le *contexte* dans lequel elle a été créé,
  c'est à dire l'état des variables locales qui lui étaient accessibles.

* Une telle fonction assortie d'un contexte est appelée une **fermeture**.

* Dans l'`exemple précédent`__,
  la variable ``b1`` est définie au chargement de la page,
  mais « survit » à cette fonction,
  puisqu'elle est réutilisée au clic sur ce bouton,
  et encore deux secondes plus tard,
  dans le :en:`callback` de la fonction ``setTimeout``.

* Visualisez l'exécution pas à pas d'un autre exemple de fermeture
  sur turb0js__ ou sur pythontutor__.


__ exemple_setTimeout_
__ http://www.turb0js.com/a/Understanding_scopes_and_closures
__ http://pythontutor.com/visualize.html#code=function+make_adder_func(val)+%7B%0A++function+adder(n)+%7B%0A++++return+n+%2B+val%3B%0A++%7D%0A++return+adder%3B%0A%7D%0A%0Avar+add2+%3D+make_adder_func(2)%3B%0Avar+add10+%3D+make_adder_func(10)%3B%0A%0Avar+i+%3D+add2(40)%3B%0Ai+%3D+add10(i)%3B&mode=display&origin=opt-frontend.js&cumulative=false&heapPrimitives=false&textReferences=false&py=js&rawInputLstJSON=%5B%5D&curInstr=0


.. _dom:

L'arbre DOM
===========

Rappel
------

Les balises HTML décrivent une `structure d'arbre`__.

__ http://champin.net/enseignement/intro-web/html.html#structure-en-arbre

.. graphviz::

   graph  {

     node [ shape=box, style=rounded]

     html -- head
      head -- title -- title_txt
     html -- body
      body -- h1 -- h1_txt
      body -- p
       p -- p_txt
       p -- a -- a_txt
      body -- img

     a         [ label="a\nhref='./link'" ]
     img       [ label="img\src='./pic'" ]
     title_txt [ shape=box, style=filled, label="Le document" ]
     h1_txt    [ shape=box, style=filled, label="Message important" ]
     p_txt     [ shape=box, style=filled, label="Bonjour le " ]
     a_txt     [ shape=box, style=filled, label="monde" ]

   }


Terminologie
------------

* Cet arbre s'appelle l'arbre DOM (pour :en:`Document Object Model`).

* Les nœuds correspondant aux balises sont appelés des **éléments**.

* Les nœuds contenant le contenu textuels sont simplement appelés des « nœuds texte ».

.. note::

   Il existe d'autres types de nœuds (par exemple les nœuds commentaire),
   mais ils sont plus rarement utiles.


.. _manipulation_du_dom:

Consultation du DOM
-------------------

Récupérer des éléments depuis l'objet ``document``\  :

`getElementById <http://devdocs.io/dom/document/getelementbyid>`_,
`getElementsByTagName <http://devdocs.io/dom/document/getelementsbytagname>`_,
`getElementsByClassName <http://devdocs.io/dom/document/getelementsbyclassname>`_,
`querySelector <http://devdocs.io/dom/document/queryselector>`_,
`querySelectorAll <http://devdocs.io/dom/document/queryselectorall>`_

Récupérer des éléments depuis un autre élément ``e``\  :

`e.getElementsByTagName <http://devdocs.io/dom/element/getelementsbytagname>`_,
`e.getElementsByClassName <http://devdocs.io/dom/element/getelementsbyclassname>`_,
`e.querySelector <http://devdocs.io/dom/element/queryselector>`_,
`e.querySelectorAll <http://devdocs.io/dom/element/queryselectorall>`_,
`e.childNodes <http://devdocs.io/dom/node/childnodes>`_,
`e.children <http://devdocs.io/dom/parentnode/children>`_,
`e.parentNode <http://devdocs.io/dom/node/parentnode>`_,

Propriéts d'un nœud :

`nodeName <http://devdocs.io/dom/node/nodename>`_,
`nodeType <http://devdocs.io/dom/node/nodetype>`_,
`nodeValue <http://devdocs.io/dom/node/nodevalue>`_,
`textContent <http://devdocs.io/dom/node/textcontent>`_

Modification du DOM
-------------------

Création d'un nœud :

`document.createElement <http://devdocs.io/dom/document/createelement>`_,
`document.createTextNode <http://devdocs.io/dom/document/createtextnode>`_,
`elt.cloneNode <http://devdocs.io/dom/node/clonenode>`_

Une fois créé, le nœud est encore *hors* de l'arborescence du document
(et donc, non affiché).
Il est nécessaire de le rattacher à un nœud parent
par l'une des méthodes suivante :

`insertBefore <http://devdocs.io/dom/node/insertbefore>`_,
`replaceChild <http://devdocs.io/dom/node/replacechild>`_,
`removeChild <http://devdocs.io/dom/node/removechild>`_,
`appendChild <http://devdocs.io/dom/node/appendchild>`_,

Cheminement d'un événement
--------------------------

.. figure:: _static/event-flow.*
   :width: 60%

   Source : http://www.w3.org/TR/DOM-Level-3-Events/#event-flow

Paramètre d'un :en:`listener`
-----------------------------

* Par défaut, les :en:`listeners` dont déclenchés à la remontée de l'événement.

* Il est donc possible de s'abonner à tous les événements se produisant *à l'intérieur* d'un élément
  (et pas uniquement *sur* cet élément).

* Le :en:`listener` reçoit en paramètre un
  `événement <http://devdocs.io/dom/event>`_,
  dont l'attribut ``target`` contient l'élément cible.

.. note::

   On peut également forcer un listener à se déclencher à la descente
   (:en:`capture` d'un événement) plutôt qu'à sa remontée (:en:`bubbling`).
   Pour cela on passera ``true`` en troisème paramètre de
   `addEventListener <http://devdocs.io/dom/eventtarget.addeventlistener>`_.

.. nextslide::

.. code::

  document.getElementsByTagName("body")[0]
    .addEventListener("click", function(evt) {
      var msg = document.getElementById("msg");
      if (evt.target.tagName === "BUTTON") {
          msg.textContent = "Vous avez cliqué sur " +
             evt.target.textContent;
      } else {
          console.log(evt.target);
          msg.textContent = "Vous avez raté les boutons...";
      }
  });
  
`Voir et modifier cet exemple`__

__ http://jsbin.com/zifogo/1/edit?html,js,output

.. note::

   L'objet événement passé en paramètre aux :en:`listeners`
   a également une méthode ``preventDefault``
   qui permet d'inhiber le comportement par défaut de l'événement.


Note sur les arguments des fonctions et Javascript
``````````````````````````````````````````````````

Comme on vient de le voir pour les :en:`listeners`,
Javascript est très tolérant avec le nombre de paramètres des fonctions.

* Si on appelle une fonction avec trop de paramètres,
  les paramètres supplémentaires sont disponibles dans une variable spéciale
  nommée ``arguments`` (comparable à un tableau).

* Si on appelle une fonction avec pas assez de paramètres,
  les paramètres oubliés reçoivent comme valeur ``undefined``.



TP: Horloge avec alarme
=======================

.. rst-class:: exercice

Sujet
-----

* Créez une horloge digitale qui rafraîchit son affichage automatiquement.
  Vous aurez besoin pour cela de la classe
  `Date <http://devdocs.io/javascript/global_objects/date>`_
  et de la fonction
  `setTimeout <http://devdocs.io/dom/window.settimeout>`_.

* Vous ajouterez ensuite une fonctionalité permettant d'ajouter,
  de modifier et de supprimer des alarmes.
  Pour faire sonner votre alarme,
  vous pourrez notamment créer un élément
  `<audio> <http://devdocs.io/html/element/audio>`_.

.. figure:: _static/tp-alarme.*
   :class: screenshot


Pour aller plus loin
====================

Loupe
-----

http://latentflip.com/loupe/

Loupe vous permet de visualiser la manière dont les événements sont gérés en Javascript.

La vidéo qui sert d'introduction est également une bonne introductions
aux mécanismes mis en œuvre.

