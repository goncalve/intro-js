:tocdepth: 3

.. include:: common.rst.inc

Projet : lecteur de podcasts
============================

Podcast
+++++++

Flux d'information
------------------

* La notion de flux d'information (`information feed`:en:)
  est apparue avec le début du Web social
  (forums, blogs, puis réseaux sociaux).

* C'est un fichier de données accessible sur le Web,
  structuré en entrées datés.

* Il n'a pas vocation a être affiché dans un navigateur,
  mais dans des applications spécialisées.

* Les mises à jour de ce fichier se font pas ajout de nouvelles entrées,
  ou suppression des entrées obsolètes.

.. figure:: _static/feed-icon.*
   :width: 10%

Exemples de flux d'informations
```````````````````````````````

* articles sur un site d'informations
* billets sur un blog
* messages sur un forum
* mur sur un réseau social
* modifications sur une page Wikipedia
* `etc.`:l:

Podcast
```````

Un podcast est un flux d'information
dont les entrées contiennent un lien vers un fichier multimédia
(généralement audio ou vidéo).

Exemples :

* http://www.podcastdirectory.com/
* http://www.franceinfo.fr/programmes-chroniques/podcasts
* http://www.rottentomatoes.com/#homepage-podcast-panel
* http://edition.cnn.com/services/podcasting/ (Student News)



Formats de flux
---------------

Plusieurs formats concurrents ont été proposés :

* `RSS (RDF Site Summary) 1.0`__
* `RSS (Really Simple Syndication) 2.0`__
* `Atom`__
* `Activity Streams`__

__ http://web.resource.org/rss/1.0/
__ http://www.rssboard.org/rss-specification
__ https://tools.ietf.org/html/rfc4287
__ http://activitystrea.ms/

Dans notre scénario, le format le plus utilisé est encore RSS 2.0.

Structure d'un flux RSS 2.0
```````````````````````````

* RSS 2.0 est un format XML .
* La racine `rss`` contient un (ou plusieurs) élément(s) ``channel``.
* Un élément ``channel`` contient les éléments suivants :

  - ``title``\  : son titre
  - ``link``\  : l'URL de sa page Web
  - ``description``\  : une description textuelle
  - ``image`` (facultative) : une image,
    décrite notamment par un sous-élément ``url``
  - plusieurs éléments ``item``, chacun décrivant une entrée.

.. nextslide::

* Un élément ``item`` contient les éléments suivants :

  - ``title``, ``link`` et ``description`` (cf. ci-dessus)
  - ``enclosure``, décrite par les *attributs* ``type``, ``url`` et ``length``.



Lecture RSS depuis Javascript
+++++++++++++++++++++++++++++

Same Origin Policy
------------------

* Rappel : la règle de `Same Origin Policy <same_origin_policy>`:ref:
  empêche une application Javascript d'accéder à des données
  sur un autre serveur que celui qui l'a émise.

* Solutions possibles :

  + accéder à un serveur utilisant les en-têtes CORS_;
  + utiliser un `proxy`:en: sur le serveur de l'application (exemple__) ;
  + utiliser un `proxy`:en: ajoutant les en-têtes CORS_ (exemple__).

.. digraph:: proxy

  margin=0; rankdir=LR;
  bgcolor="#FFFFFF00";
  node [ style=filled,color=black,fillcolor=white ];
  edge [ dir=both ]

  client -> proxy [ label="SOP", style=dashed ]
  proxy -> RSS [ label=<<s>SOP</s>> ]


.. _CORS: http://www.w3.org/TR/cors/

__ https://www.npmjs.com/package/cors-anywhere
__ https://crossorigin.me/

XMLHttpRequest
--------------

* Puisque le résultat est du XML,
  il est préférable d'utiliser l'attribut ``responseXML``
  plutôt que l'attribut ``responseText``.

* Cet attribut contient un `arbre DOM <manipulation_du_dom>`:ref:
  similaire à celui décrivant le document XML.

Multimédia
----------

* Pour jouer les fichiers multimédia,
  vous pourrez utiliser les balises ``<audio>`` et ``<video>`` de HTML5.

* Notez cependant que tous les navigateurs ne sont pas compatibles avec tous les formats,
  notamment pour la vidéo.


Votre travail
+++++++++++++

Cahier des charges minimal
--------------------------

* Votre application doit permettre de saisir l'URL d'un podcast,

* d'afficher le contenu de ce podcast sous une forme ergonomique,

* avec notamment la liste des entrées par ordre chronologique inverse
  (plus récents en haut),

* avec la possibilité de lire (dans la *même* page)
  le contenu multimédia d'une entrée (mais pas plusieurs à la fois).

* Ergonomiquement,
  l'application doit apparaître comme *un* lecteur permettant de lire les différentes entrées du podcast,
  et *pas* comme une accumulation de plusieurs lecteurs jouant chacun un seul des épisodes.

* L'état de l'application doit se réfléter dans l'URL,
  afin de pouvoir revenir rapidement sur un état mémorisé ;

* à vous cependant de décider ce qui fait partie de l'état
  (podcast sélectionné, épisode sélectionné, position dans la lecture...).

* Vous fournirez également une documentation utilisateur minimale,
  accessible depuis l'application.

* Votre code doit passer sans erreur *ni avertissement* le `valideur du W3C`_ pour HTML et CSS,
  et JSHint_ pour le code Javascript.

.. _valideur du W3C: http://validator.w3.org/
.. _JSHint: http://jshint.com/

Extensions possibles
--------------------

* marquer les entrées déjà lues

* programmer une liste de lecture

* afficher le contenu de plusieurs podcasts à la fois

* mémoriser l'état dans le navigateur (local storage)

* fonction de recherche de podcats

* ...


..
  APIs des navigateurs
  ====================
  
  * Cours
     + APIs browser - généralités
  * TP
     + projet sur une API au choix
  	 - local storage
  	 - canvas
  	 - ...
    
  * Autres points à aborder ?
    + programmation objet en JS ?
    + Unit tests
    + Bower / Grunt / ...
  
