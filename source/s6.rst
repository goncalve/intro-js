.. include:: common.rst.inc

Projet : jeu Snake
==================

L'objectif de votre projet est de créer un clone du jeu *Snake*
(comme `celui-ci`__).

__ http://patorjk.com/games/snake/

Votre application comportera au minimum deux "écrans" :

* un écran d'accueil, présentant le jeu et permettant de choisir parmi différents niveaux (cf. ci-dessous),
* un écran de jeu, ou se déroule le jeu à proprement parler, 
  en l'affichant dans un canvas 2D, et en affichant le score du joueur.

Le passage d'un écran à l'autre doit se faire sans changer d'URL
(vous devez donc *modifier* la page par manipulation du DOM,
et non en chargeant une nouvelle page HTML).

La gestion du jeu
+++++++++++++++++

L'état du monde est représenté dans un tableau JS à deux dimensions.
Chaque cellule du tableau représente une "case" du monde,
et indique (par sa valeur) ce ce que contient cette case
(mur, serpent, fruit...).
Il vous est recommandé de définir des constantes correspondant à chaque type d'objet,
pour améliorer la lisibilité du programme.

Par ailleurs, l'état du serpent est également représenté par un tableau à une dimension,
dont chaque cellule contient les coordonnées d'une case du serpent.
Le début de ce tableau correspond à la queue du serpent,
et la fin du tableau correspond à sa tête.
Lorsque le serpent se déplace,
on ajoutera la nouvelle position de sa tête à la fin
(avec la méthode `push`_)
et on retirera l'ancienne position de sa queue
(avec la méthode `shift`_).

Vous devrez abonner une fonction aux événements ``keypress``,
qui interceptera et mémorisera les touche tapées par l'utilisateur
(notamment celles servant à changer la direction du serpent).

Enfin, écrirez une fonction qui gérera *un* déplacement du serpent,
et mettra à jour l'affichage.
Cette fonction devra notamment

* déplacer le serpent d'une case dans la direction indiquée par le joueur,
* gérer l'effet de ce déplacement :

  - fin de partie si le serpent rencontre un mut ou son propre corps,
  - augmentation du score s'il a mangé un fruit,
  - changement de taille si le serpent a mangé un fruit récemment,
  - apparition d'un nouveau fruit si besoin...

Vous devrez faire en sorte que cette fonction soit appelée à intervalle de temps régulier,
(par exemple en utilisant `setInterval`_).

.. _push: https://devdocs.io/javascript/global_objects/array/push
.. _shift: https://devdocs.io/javascript/global_objects/array/shift
.. _setInterval: https://devdocs.io/dom/windoworworkerglobalscope/setinterval



La gestion des niveaux
++++++++++++++++++++++

Chaque niveau est décrit par un fichier JSON ayant la structure suivante:

.. code-block:: JSON

    {
        "dimensions": [80, 40],
        "delay": 200,
        "walls": [
            [5,5], [5,6], [5,7], [5,8], [70, 35], [71, 35], [72, 35]
        ],
        "fruit": [
            [10,10]
        ]
    }

où

* ``dimensions`` donne la taille de la grille dans laquelle évolue le serpent,
* ``delay`` donne le délais (en ms) entre deux déplacements du serpent,
* ``walls`` donne la positions des cases de mur,
* ``fruit`` donne la position initiale du fruit

La page de garde doit donnet le choix entre plusieurs niveaux ;
lorsque le joueur en choisit un, le fichier JSON correspondant est chargé,
et le "monde" est créé conformément à ce fichier.


Extensions
++++++++++

Le cahier des charges ci-dessus est minimaliste.
À vous de faire preuve d'originalité en l'étendant.
Par exemple :

* Complexification du jeu (en étendant le format JSON de description des niveaux) :

    - dans certains niveaux, le serpent accélère progressivement ;
    - dans certains niveaux, les fruits disparaissent au bout d'un moment,
      et réapparaissent ailleurs ;
    - dans certains niveaux, certaines cases (glace) empêchent de changer de direction ;
    - avoir plusieurs types de fruits, offrant des capacités spéciales
      (diminuer la taille du serpent au lieu de l'augmenter,
      creuser sous terre...) ;
    - permettre un mode multi-joueur (sur le même poste)...

* Améliorations esthétiques :

    - intégrer des sons ;
    - utiliser des images bitmaps plutôt que des carrés monochromes ;
    - utiliser un canvas WebGL pour représenter le jeu...
